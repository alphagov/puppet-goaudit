---
# # Configure socket buffers, leave unset to use the system defaults
# # Values will be doubled by the kernel
# # It is recommended you do not set any of these values unless you really need to
# socket_buffer:
#   # Default is net.core.rmem_default (/proc/sys/net/core/rmem_default)
#   # Maximum max is net.core.rmem_max (/proc/sys/net/core/rmem_max)
#   receive: 16384

events:
  # Minimum event type to capture, default 1300
  min: <%= @data['main']['events']['min'] %>

  # Maximum event type to capture, default 1399
  max: <%= @data['main']['events']['max'] %>

# Configure message sequence tracking
message_tracking:
  # Track messages and identify if we missed any, default true
  enabled: <%= @data['main']['message_tracking']['enabled'] %>

  # Log out of orderness, these messages typically signify an overloading system, default false
  log_out_of_order: <%= @data['main']['message_tracking']['log_out_of_order'] %>

  # Maximum out of orderness before a missed sequence is presumed dropped, default 500
  max_out_of_order: <%= @data['main']['message_tracking']['max_out_of_order'] %>

# Configure where to output audit events
# Only 1 output can be active at a given time
output:
  # Writes to stdout
  # All program status logging will be moved to stderr
  stdout:
    enabled: <%= @data['main']['output']['stdout']['enabled'] %>

    # Total number of attempts to write a line before considering giving up
    # If a write fails go-audit will sleep for 1 second before retrying
    # Default is 3
    attempts: <%= @data['main']['output']['stdout']['attempts'] %>

  # Writes logs to syslog
  syslog:
    enabled: <%= @data['main']['output']['syslog']['enabled'] %>
    attempts: <%= @data['main']['output']['syslog']['attempts'] %>

    # Configure the type of socket this should be, default is unixgram
    # This maps to `network` in golangs net.Dial: https://golang.org/pkg/net/#Dial
    network: "<%= @data['main']['output']['syslog']['network'] %>"

    # Set the remote address to connect to, this can be a path or an ip address
    # This maps to `address` in golangs net.Dial: https://golang.org/pkg/net/#Dial
    address: "<%= @data['main']['output']['syslog']['address'] %>"

    # Sets the facility and severity for all events. See the table below for help
    # The default is 132 which maps to local0 | warn
    priority: <%= @data['main']['output']['syslog']['priority'] %> # local0 | emerg

    # Typically the name of the program generating the message. The PID is of the process is appended for you: [1233]
    # Default value is "go-audit"
    tag: "<%= @data['main']['output']['syslog']['tag'] %>"

  # Appends logs to a file
  file:
    enabled: <%= @data['main']['output']['file']['enabled'] %>
    attempts: <%= @data['main']['output']['file']['attempts'] %>

    # Path of the file to write lines to
    # The actual file will be created if it is missing but make sure the parent directory exists
    path: "<%= @data['main']['output']['file']['path'] %>"

    # Octal file mode for the log file, make sure to always have a leading 0
    mode: "<%= @data['main']['output']['file']['mode'] %>"

    # User and group that should own the log file
    user: "<%= @data['main']['output']['file']['user'] %>"
    group: "<%= @data['main']['output']['file']['group'] %>"

# Configure logging, only stdout and stderr are used.
log:
  # Gives you a bit of control over log line prefixes. Default is 0 - nothing.
  # To get the `filename:lineno` you would set this to 16
  #
  # Ldate         = 1  // the date in the local time zone: 2009/01/23
  # Ltime         = 2  // the time in the local time zone: 01:23:23
  # Lmicroseconds = 4  // microsecond resolution: 01:23:23.123123.  assumes Ltime.
  # Llongfile     = 8  // full file name and line number: /a/b/c/d.go:23
  # Lshortfile    = 16 // final file name element and line number: d.go:23. overrides Llongfile
  # LUTC          = 32 // if Ldate or Ltime is set, use UTC rather than the local time zone
  #
  # See also: https://golang.org/pkg/log/#pkg-constants
  flags: <%= @data['main']['log']['flags'] %>

<%=
if @data['rules'] then
  # initialise a line buffer array to build up the output for this template
  # block in a line-wise fashion
  output_lines = []

  @data['rules'].each do |rule|
    # Convert multi-line string to YAML comment block
    if rule['comment'] != nil then
      output_lines.push(
        rule['comment'].split("\n").map { |line|
          "# #{line}"
        }
      )
    end

    # Express rules as YAML array elements
    output_lines.push(
      [ rule['content'] ].flatten.map { |line|
        if line != nil then
          line.chomp!
        else
          line = ''
        end
        "- \"#{line}\""
      }
    )
  end

  if @data['enable_rule'] then
    case @data['enable_rule']
    when 'disable'
      enable_flag = 0
    when 'enable'
      enable_flag = 1
    when 'lock'
      enable_flag = 2
    end

    output_lines.push([
      "#Â Auto-added by goaudit::auto_enable_rule",
      "- -e #{enable_flag}",
    ])
  end

  output_lines.flatten!
  # Go back over our output buffer and indent by two spaces
  output_lines.map! { |line| "  #{line}" }

  # Name the array and insert the header
  output_lines.unshift("rules:")
  output_lines.join("\n")
else
  "rules: []"
end
%>

<%=
if @data['filters'] then
  # initialise a line buffer array to build up the output for this template
  # block in a line-wise fashion
  output_lines = []

  @data['filters'].each do |filter|
    # Convert multi-line string to YAML comment block
    if filter['comment'] != nil then
      output_lines.push(
        filter['comment'].split("\n").map { |line|
          "# #{line}"
        }
      )
    end

    # Express filter as YAML hash
    output_lines.push("- syscall: #{filter['syscall']}")
    output_lines.push("  message_type: #{filter['message_type']}")
    output_lines.push("  regex: \"#{filter['regex']}\"")
  end

  output_lines.flatten!
  # Go back over our output buffer and indent by two spaces
  output_lines.map! { |line| "  #{line}" }

  # Name the array and insert the header
  output_lines.unshift("filters:")
  output_lines.join("\n")
else
  "filters: []"
end
%>

